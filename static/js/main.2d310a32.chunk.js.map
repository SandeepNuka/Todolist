{"version":3,"sources":["Plan.js","App.js","reportWebVitals.js","index.js"],"names":["Plan","props","className","value","onClick","deldata","id","App","state","items","text","handlechange","e","setState","target","handleAdd","newarray","deltedata","console","log","olditem","exceptdelarray","filter","elemetnt","i","type","placeholder","this","onChange","style","fontWeight","map","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAkBeA,MAhBf,SAAcC,GACZ,OACE,qCACE,oBAAIC,UAAU,4BAAd,SAA2CD,EAAME,QACjD,yBACED,UAAU,+BACVE,QAAS,WACPH,EAAMI,QAAQJ,EAAMK,KAHxB,oBAMUL,EAAMK,GAAK,SC0EZC,E,4MAhFbC,MAAQ,CACNC,MAAO,GACPC,KAAM,I,EAERC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEH,KAAME,EAAEE,OAAOX,S,EAEjCY,UAAY,SAACH,GAMX,GAAwB,KAApB,EAAKJ,MAAME,KAAa,CAC1B,IAAMM,EAAQ,sBAAO,EAAKR,MAAMC,OAAlB,CAAyB,EAAKD,MAAME,OAClD,EAAKG,SAAS,CAAEJ,MAAOO,EAAUN,KAAM,O,EAI3CO,UAAY,SAACX,GAMXY,QAAQC,IAAI,UAAWb,GACvB,IAAMc,EAAO,YAAO,EAAKZ,MAAMC,OAC/BS,QAAQC,IAAI,WAAYC,GACxB,IAAMC,EAAiBD,EAAQE,QAAO,SAACC,EAAUC,GAC/C,OAAOA,IAAMlB,KAEf,EAAKO,SAAS,CAAEJ,MAAOY,K,4CAEzB,WAAU,IAAD,OACP,OACE,qBAAKnB,UAAU,6CAAf,SACE,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,yCAAf,UACE,oBAAIA,UAAU,eAAd,uBACA,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAU,QAAf,SACE,uBACEuB,KAAK,OACLvB,UAAU,iBACVwB,YAAY,kCACZvB,MAAOwB,KAAKnB,MAAME,KAClBkB,SAAUD,KAAKhB,iBAGnB,qBAAKT,UAAU,QAAf,SACE,wBACEA,UAAU,mBACV2B,MAAO,CAAEC,WAAY,QACrB1B,QAASuB,KAAKZ,UAHhB,mBAQF,qBAAKb,UAAU,kBAAf,SACE,oBAAIA,UAAU,0BAAd,SACGyB,KAAKnB,MAAMC,MAAMsB,KAAI,SAAC5B,EAAOqB,GAC5B,OACE,cAAC,EAAD,CAEErB,MAAOA,EACPG,GAAIkB,EACJnB,QAAS,EAAKY,WAHTO,wB,GAhEXQ,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2d310a32.chunk.js","sourcesContent":["import \"./index.css\";\r\n\r\nfunction Plan(props) {\r\n  return (\r\n    <>\r\n      <li className=\"shadow p-2 my-2 col-sm-9 \">{props.value}</li>\r\n      <button\r\n        className=\"btn btn-danger my-2 col-sm-2\"\r\n        onClick={() => {\r\n          props.deldata(props.id);\r\n        }}\r\n      >\r\n        delete {props.id + 1}\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Plan;\r\n","import React, { Component } from \"react\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Plan from \"./Plan\";\n\nclass App extends Component {\n  state = {\n    items: [],\n    text: \"\",\n  };\n  handlechange = (e) => {\n    this.setState({ text: e.target.value });\n  };\n  handleAdd = (e) => {\n    {\n      /* when add button is clickd it will execute the if condition is executed when the string is not empty\n       after that we will copythe old array string if present and the current string into new array after that again we \n       will set the newarray to this.state.items array*/\n    }\n    if (this.state.text !== \"\") {\n      const newarray = [...this.state.items, this.state.text];\n      this.setState({ items: newarray, text: \"\" });\n    }\n  };\n\n  deltedata = (id) => {\n    {\n      /* here we will get the id from Plan how we used filter function it will takekn two parameters first one element and id\n      it will store the elements of arrays into excepdelarray this array contain all elements except deleted element agian we are copoing \n     excepdelarray into this.state.items array   */\n    }\n    console.log(\"deleted\", id);\n    const olditem = [...this.state.items];\n    console.log(\"olditems\", olditem);\n    const exceptdelarray = olditem.filter((elemetnt, i) => {\n      return i !== id;\n    });\n    this.setState({ items: exceptdelarray });\n  };\n  render() {\n    return (\n      <div className=\" container-fluid my-5 bg-darkslategray p-3\">\n        <div className=\"row\">\n          <div className=\"col-sm-6 mx-auto  shadow-lg text-white\">\n            <h1 className=\"text-center \">Todo List</h1>\n            <div className=\"row mx-auto\">\n              <div className=\"col-9\">\n                <input\n                  type=\"text\"\n                  className=\"form-control  \"\n                  placeholder=\" write anything you want to add\"\n                  value={this.state.text}\n                  onChange={this.handlechange}\n                />\n              </div>\n              <div className=\"col-3\">\n                <button\n                  className=\"btn btn-primary \"\n                  style={{ fontWeight: \"bold\" }}\n                  onClick={this.handleAdd}\n                >\n                  Add\n                </button>\n              </div>\n              <div className=\"container-fluid\">\n                <ol className=\" m-5 row list-unstyled \">\n                  {this.state.items.map((value, i) => {\n                    return (\n                      <Plan\n                        key={i}\n                        value={value}\n                        id={i}\n                        deldata={this.deltedata}\n                      />\n                    );\n                  })}\n                </ol>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}